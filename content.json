{"pages":[{"title":"","text":"0J9NIKzpEn","link":"/baidu_verify_0J9NIKzpEn.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"分类","text":"","link":"/categories/index.html"},{"title":"","text":"{\"mouseover\":[{\"selector\":\"#showInfoBtn\",\"text\":[\"查看最新吐槽和站内信息\"]},{\"selector\":\"#showTalkBtn\",\"text\":[\"要和我聊天吗？\"]},{\"selector\":\"#hideButton\",\"text\":[\"隐藏伊斯特瓦尔，希望隐藏后我们还能再见面！\"]},{\"selector\":\"#musicButton\",\"text\":[\"给页面加点音乐吗？\"]},{\"selector\":\"#youduButton\",\"text\":[\"按钮有毒，癫痫患者不要开启！！！点一下开启，再点一下可以关闭。\"]},{\"selector\":\".itemarticle-tips a\",\"text\":[\"要看看 {text} 么？\"]},{\"selector\":\".searchbox\",\"text\":[\"在找什么东西呢，需要帮忙吗？\"]}],\"click\":[{\"selector\":\"#landlord #live2d\",\"text\":[\"不要动手动脚的！快把手拿开~~\",\"真…真的是不知羞耻！\",\"Hentai！\",\"再摸的话我可要报警了！\",\"110吗，这里有个变态！\"]}]}","link":"/live2d/message.json"},{"title":"标签","text":"","link":"/tags/index.html"},{"title":"","text":"#landlord { user-select: none; position: fixed; left: 5px; bottom: 0; width: 250px; height: 280px; z-index: 10000; font-size: 0; /*transition: all .3s ease-in-out;*/ display:none; } #open_live2d{ border: 2px solid rgba(75,127,199,0.9); border-radius: 2px; background-color: rgba(74, 59, 114,0.9); padding:2px 10px; color:#fff; height:24px; line-height:24px; font-size:12px; position:fixed; right:5px; bottom:5px; z-index:10000; cursor:pointer; display:none; } #showInfoBtn{ display:none; } #live2d { width: 250px; height: 280px; position: relative; z-index:3; } .message { opacity: 0; color: #fff; box-sizing: border-box; width: 250px; height: auto; margin: auto; padding: 7px; bottom: 280px; left: 0px; text-align: center; border: 2px solid rgba(75,127,199,0.9); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); font-size: 13px; font-weight: 400; text-overflow: ellipsis; text-transform: uppercase; overflow: hidden; position: absolute; /*animation-delay: 5s; animation-duration: 50s; animation-iteration-count: infinite; animation-name: shake; animation-timing-function: ease-in-out;*/ } .live_talk_input_body{ position:absolute; bottom:15px; left:0; width:250px; display:none; z-index:4; } .live_talk_input_text_body{ width:250px; box-sizing:border-box; height:28px; border: 2px solid rgb(223, 179, 241); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); } .live_talk_input_name_body{ width:70px; box-sizing:border-box; height:24px; border: 2px solid rgb(223, 179, 241); border-radius: 5px; background-color: rgba(74, 59, 114,0.9); margin-bottom:3px; } .live_talk_name{ background-color:transparent; border:0px; margin:0; width:66px; height:20px; line-height:20px; text-align:center; font-size:12px; color:#fff; outline:none; box-sizing:border-box; padding:0 3px; } .live_talk_talk{ background-color:transparent; border:0px; margin:0; width:206px; height:24px; line-height:24px; text-align:left; font-size:12px; color:#fff; outline:none; box-sizing:border-box; padding:0 3px; float:left; } .live_talk_send_btn{ background-color:transparent; color:#fff; border:0px; cursor:pointer; padding:0 4px; border-left:1px solid #fff; font-size:12px; float:right; height:18px; line-height:18px; outline:none; margin:3px 0 0 0; } .white_input:-moz-placeholder { /* Mozilla Firefox 4 to 18 */ color: #E4E4E4; opacity: 1; } .white_input::-moz-placeholder { /* Mozilla Firefox 19+*/ color: #E4E4E4; opacity: 1; } .white_input:-ms-input-placeholder { color: #E4E4E4; } .white_input::-webkit-input-placeholder { color: #E4E4E4; } .hide-button { position: absolute; top: 10px; right: 0; /* bottom: 30px; */ display: none; overflow: hidden; /* padding: 4px; */ width: 60px; height: 20px; border: 1px solid rgba(255,137,255,.4); border-radius: 12px; background: rgba(255,137,255,.2); box-shadow: 0 3px 15px 2px rgba(255,137,255,.4); text-align: center; font-size: 12px; cursor: pointer; } .hide-button:hover { border: 1px solid #f4a7b9; background: #f4f6f8; } .live_ico_box{ width:15px; position:absolute; z-index:5; right:0; top:10px; opacity:0.9; } .live_ico_item{ width:15px; height: 20px; cursor:pointer; background-position:center center; background-repeat:no-repeat; background-size:15px; } .live_ico_item.type_talk{ background-image:url(../images/talk.png); } .live_ico_item.type_quit{ background-image:url(../images/quite.png); } .live_ico_item.type_info{ background-image:url(../images/info.png); } .live_ico_item.type_music{ background-image:url(../images/music.png); } .live_ico_item.type_youdu{ background-image:url(../images/youdu.png); } .live_ico_item.type_music.play{ background-image:url(../images/pasue.png); } .live_ico_item.type_youdu.doudong{ -webkit-animation-name: shake-little; -ms-animation-name: shake-little; animation-name: shake-little; -webkit-animation-duration: 100ms; -ms-animation-duration: 100ms; animation-duration: 100ms; -webkit-animation-iteration-count: infinite; -ms-animation-iteration-count: infinite; animation-iteration-count: infinite; -webkit-animation-timing-function: ease-in-out; -ms-animation-timing-function: ease-in-out; animation-timing-function: ease-in-out; -webkit-animation-delay: 0s; -ms-animation-delay: 0s; animation-delay: 0s; -webkit-animation-play-state: running; -ms-animation-play-state: running; animation-play-state: running } .douqilai,.douqilai *{ animation: shake-it .5s reverse infinite cubic-bezier(0.68, -0.55, 0.27, 1.55); } .l2d_caihong{ animation: rainbow 1.5s infinite; } @media (max-width: 860px) { #landlord { display: none!important; } } @keyframes shake { 2% { transform: translate(0.5px, -1.5px) rotate(-0.5deg); } 4% { transform: translate(0.5px, 1.5px) rotate(1.5deg); } 6% { transform: translate(1.5px, 1.5px) rotate(1.5deg); } 8% { transform: translate(2.5px, 1.5px) rotate(0.5deg); } 10% { transform: translate(0.5px, 2.5px) rotate(0.5deg); } 12% { transform: translate(1.5px, 1.5px) rotate(0.5deg); } 14% { transform: translate(0.5px, 0.5px) rotate(0.5deg); } 16% { transform: translate(-1.5px, -0.5px) rotate(1.5deg); } 18% { transform: translate(0.5px, 0.5px) rotate(1.5deg); } 20% { transform: translate(2.5px, 2.5px) rotate(1.5deg); } 22% { transform: translate(0.5px, -1.5px) rotate(1.5deg); } 24% { transform: translate(-1.5px, 1.5px) rotate(-0.5deg); } 26% { transform: translate(1.5px, 0.5px) rotate(1.5deg); } 28% { transform: translate(-0.5px, -0.5px) rotate(-0.5deg); } 30% { transform: translate(1.5px, -0.5px) rotate(-0.5deg); } 32% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 34% { transform: translate(2.5px, 2.5px) rotate(-0.5deg); } 36% { transform: translate(0.5px, -1.5px) rotate(0.5deg); } 38% { transform: translate(2.5px, -0.5px) rotate(-0.5deg); } 40% { transform: translate(-0.5px, 2.5px) rotate(0.5deg); } 42% { transform: translate(-1.5px, 2.5px) rotate(0.5deg); } 44% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 46% { transform: translate(1.5px, -0.5px) rotate(-0.5deg); } 48% { transform: translate(2.5px, -0.5px) rotate(0.5deg); } 50% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 52% { transform: translate(-0.5px, 1.5px) rotate(0.5deg); } 54% { transform: translate(-1.5px, 1.5px) rotate(0.5deg); } 56% { transform: translate(0.5px, 2.5px) rotate(1.5deg); } 58% { transform: translate(2.5px, 2.5px) rotate(0.5deg); } 60% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 62% { transform: translate(-1.5px, 0.5px) rotate(1.5deg); } 64% { transform: translate(-1.5px, 1.5px) rotate(1.5deg); } 66% { transform: translate(0.5px, 2.5px) rotate(1.5deg); } 68% { transform: translate(2.5px, -1.5px) rotate(1.5deg); } 70% { transform: translate(2.5px, 2.5px) rotate(0.5deg); } 72% { transform: translate(-0.5px, -1.5px) rotate(1.5deg); } 74% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 76% { transform: translate(-1.5px, 2.5px) rotate(1.5deg); } 78% { transform: translate(-1.5px, 2.5px) rotate(0.5deg); } 80% { transform: translate(-1.5px, 0.5px) rotate(-0.5deg); } 82% { transform: translate(-1.5px, 0.5px) rotate(-0.5deg); } 84% { transform: translate(-0.5px, 0.5px) rotate(1.5deg); } 86% { transform: translate(2.5px, 1.5px) rotate(0.5deg); } 88% { transform: translate(-1.5px, 0.5px) rotate(1.5deg); } 90% { transform: translate(-1.5px, -0.5px) rotate(-0.5deg); } 92% { transform: translate(-1.5px, -1.5px) rotate(1.5deg); } 94% { transform: translate(0.5px, 0.5px) rotate(-0.5deg); } 96% { transform: translate(2.5px, -0.5px) rotate(-0.5deg); } 98% { transform: translate(-1.5px, -1.5px) rotate(-0.5deg); } 0%, 100% { transform: translate(0, 0) rotate(0); } } @keyframes quan { 0% { transform:rotate(0); animation-timing-function:linear; } 100% { transform:rotate(360deg); } } @-webkit-keyframes quan { 0% { -webkit-transform:rotate(0); -webkit-animation-timing-function:linear; } 100% { -webkit-transform:rotate(360deg); } } @-moz-keyframes quan { 0% { -moz-transform:rotate(0); -moz-animation-timing-function:linear; } 100% { -moz-transform:rotate(360deg); } } @-o-keyframes quan { 0% { -o-transform:rotate(0); -o-animation-timing-function:linear; } 100% { -o-transform:rotate(360deg); } } @-ms-keyframes quan { 0% { -ms-transform:rotate(0); -ms-animation-timing-function:linear; } 100% { -ms-transform:rotate(360deg); } } @-webkit-keyframes shake-little { 0% { -webkit-transform: translate(0px, 0px) rotate(0deg) } 2% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 4% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 6% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 8% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 10% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 12% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 14% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 16% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 18% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 20% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 22% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 24% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 26% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 28% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 30% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 32% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 34% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 36% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 38% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 40% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 42% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 46% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 48% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 50% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 52% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 54% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 56% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 58% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 60% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 62% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 64% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 66% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 68% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 70% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 72% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 74% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 78% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 80% { -webkit-transform: translate(0px, -1px) rotate(-0.5deg) } 82% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 84% { -webkit-transform: translate(-1px, 0px) rotate(-0.5deg) } 86% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 88% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 90% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 94% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } 96% { -webkit-transform: translate(-1px, -1px) rotate(-0.5deg) } 98% { -webkit-transform: translate(0px, 0px) rotate(-0.5deg) } } @-ms-keyframes shake-little { 0% { -ms-transform: translate(0px, 0px) rotate(0deg) } 2% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 4% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 6% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 8% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 10% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 12% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 14% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 16% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 18% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 20% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 22% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 24% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 26% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 28% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 30% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 32% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 34% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 36% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 38% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 40% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 42% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 46% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 48% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 50% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 52% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 54% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 56% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 58% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 60% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 62% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 64% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 66% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 68% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 70% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 72% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 74% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 78% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 80% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 82% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 84% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 86% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 88% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 90% { -ms-transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { -ms-transform: translate(0px, 0px) rotate(-0.5deg) } 94% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } 96% { -ms-transform: translate(-1px, 0px) rotate(-0.5deg) } 98% { -ms-transform: translate(0px, -1px) rotate(-0.5deg) } } @keyframes shake-little { 0% { transform: translate(0px, 0px) rotate(0deg) } 2% { transform: translate(-1px, -1px) rotate(-0.5deg) } 4% { transform: translate(-1px, -1px) rotate(-0.5deg) } 6% { transform: translate(0px, 0px) rotate(-0.5deg) } 8% { transform: translate(0px, -1px) rotate(-0.5deg) } 10% { transform: translate(-1px, -1px) rotate(-0.5deg) } 12% { transform: translate(0px, 0px) rotate(-0.5deg) } 14% { transform: translate(0px, 0px) rotate(-0.5deg) } 16% { transform: translate(0px, -1px) rotate(-0.5deg) } 18% { transform: translate(0px, 0px) rotate(-0.5deg) } 20% { transform: translate(-1px, -1px) rotate(-0.5deg) } 22% { transform: translate(-1px, -1px) rotate(-0.5deg) } 24% { transform: translate(-1px, -1px) rotate(-0.5deg) } 26% { transform: translate(-1px, 0px) rotate(-0.5deg) } 28% { transform: translate(0px, -1px) rotate(-0.5deg) } 30% { transform: translate(0px, -1px) rotate(-0.5deg) } 32% { transform: translate(0px, 0px) rotate(-0.5deg) } 34% { transform: translate(0px, -1px) rotate(-0.5deg) } 36% { transform: translate(-1px, 0px) rotate(-0.5deg) } 38% { transform: translate(-1px, -1px) rotate(-0.5deg) } 40% { transform: translate(0px, 0px) rotate(-0.5deg) } 42% { transform: translate(-1px, -1px) rotate(-0.5deg) } 44% { transform: translate(-1px, 0px) rotate(-0.5deg) } 46% { transform: translate(-1px, -1px) rotate(-0.5deg) } 48% { transform: translate(0px, -1px) rotate(-0.5deg) } 50% { transform: translate(0px, -1px) rotate(-0.5deg) } 52% { transform: translate(0px, 0px) rotate(-0.5deg) } 54% { transform: translate(-1px, 0px) rotate(-0.5deg) } 56% { transform: translate(0px, 0px) rotate(-0.5deg) } 58% { transform: translate(0px, 0px) rotate(-0.5deg) } 60% { transform: translate(0px, 0px) rotate(-0.5deg) } 62% { transform: translate(0px, -1px) rotate(-0.5deg) } 64% { transform: translate(0px, 0px) rotate(-0.5deg) } 66% { transform: translate(-1px, -1px) rotate(-0.5deg) } 68% { transform: translate(0px, -1px) rotate(-0.5deg) } 70% { transform: translate(0px, 0px) rotate(-0.5deg) } 72% { transform: translate(-1px, -1px) rotate(-0.5deg) } 74% { transform: translate(-1px, -1px) rotate(-0.5deg) } 76% { transform: translate(-1px, 0px) rotate(-0.5deg) } 78% { transform: translate(0px, 0px) rotate(-0.5deg) } 80% { transform: translate(0px, -1px) rotate(-0.5deg) } 82% { transform: translate(-1px, 0px) rotate(-0.5deg) } 84% { transform: translate(-1px, -1px) rotate(-0.5deg) } 86% { transform: translate(0px, -1px) rotate(-0.5deg) } 88% { transform: translate(0px, 0px) rotate(-0.5deg) } 90% { transform: translate(-1px, -1px) rotate(-0.5deg) } 92% { transform: translate(-1px, 0px) rotate(-0.5deg) } 94% { transform: translate(-1px, 0px) rotate(-0.5deg) } 96% { transform: translate(0px, -1px) rotate(-0.5deg) } 98% { transform: translate(0px, -1px) rotate(-0.5deg) } } @keyframes shake-it{ 0%{ text-shadow: 0 0 rgba(0, 255, 255, .5), 0 0 rgba(255, 0, 0, .5); } 25%{ text-shadow: -2px 0 rgba(0, 255, 255, .5), 2px 0 rgba(255, 0, 0, .5); } 50%{ text-shadow: -5px 0 rgba(0, 255, 255, .5), 3px 0 rgba(255, 0, 0, .5); } 100%{ text-shadow: 3px 0 rgba(0, 255, 255, .5), 5px 0 rgba(255, 0, 0, .5); } } @keyframes rainbow { 100% { filter: hue-rotate(360deg); } }","link":"/live2d/css/live2d.css"},{"title":"","text":"var home_Path = document.location.protocol +'//' + window.document.location.hostname +'/'; var userAgent = window.navigator.userAgent.toLowerCase(); console.log(userAgent); var norunAI = [ \"android\", \"iphone\", \"ipod\", \"ipad\", \"windows phone\", \"mqqbrowser\" ,\"msie\",\"trident/7.0\"]; var norunFlag = false; for(var i=0;i -1){ norunFlag = true; break; } } if(!window.WebGLRenderingContext){ norunFlag = true; } if(!norunFlag){ var hitFlag = false; var AIFadeFlag = false; var liveTlakTimer = null; var sleepTimer_ = null; var AITalkFlag = false; var talkNum = 0; (function (){ function renderTip(template, context) { var tokenReg = /(\\\\)?\\{([^\\{\\}\\\\]+)(\\\\)?\\}/g; return template.replace(tokenReg, function (word, slash1, token, slash2) { if (slash1 || slash2) { return word.replace('\\\\', ''); } var variables = token.replace(/\\s/g, '').split('.'); var currentObject = context; var i, length, variable; for (i = 0, length = variables.length; i < length; ++i) { variable = variables[i]; currentObject = currentObject[variable]; if (currentObject === undefined || currentObject === null) return ''; } return currentObject; }); } String.prototype.renderTip = function (context) { return renderTip(this, context); }; var re = /x/; re.toString = function() { showMessage('哈哈，你打开了控制台，是想要看看我的秘密吗？', 5000); return ''; }; $(document).on('copy', function (){ showMessage('你都复制了些什么呀，转载要记得加上出处哦~~', 5000); }); function initTips(){ $.ajax({ cache: true, url: message_Path+'message.json', dataType: \"json\", success: function (result){ $.each(result.mouseover, function (index, tips){ $(tips.selector).mouseover(function (){ var text = tips.text; if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1]; text = text.renderTip({text: $(this).text()}); showMessage(text, 3000); talkValTimer(); clearInterval(liveTlakTimer); liveTlakTimer = null; }); $(tips.selector).mouseout(function (){ showHitokoto(); if(liveTlakTimer == null){ liveTlakTimer = window.setInterval(function(){ showHitokoto(); },15000); }; }); }); $.each(result.click, function (index, tips){ $(tips.selector).click(function (){ if(hitFlag){ return false } hitFlag = true; setTimeout(function(){ hitFlag = false; },8000); var text = tips.text; if(Array.isArray(tips.text)) text = tips.text[Math.floor(Math.random() * tips.text.length + 1)-1]; text = text.renderTip({text: $(this).text()}); showMessage(text, 3000); }); clearInterval(liveTlakTimer); liveTlakTimer = null; if(liveTlakTimer == null){ liveTlakTimer = window.setInterval(function(){ showHitokoto(); },15000); }; }); } }); } initTips(); var text; if(document.referrer !== ''){ var referrer = document.createElement('a'); referrer.href = document.referrer; text = '嗨！来自 ' + referrer.hostname + ' 的朋友！'; var domain = referrer.hostname.split('.')[1]; if (domain == 'baidu') { text = '嗨！ 来自 百度搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; }else if (domain == 'so') { text = '嗨！ 来自 360搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; }else if (domain == 'google') { text = '嗨！ 来自 谷歌搜索 的朋友！欢迎访问「 ' + document.title.split(' - ')[0] + ' 」'; } }else { if (window.location.href == home_Path) { //主页URL判断，需要斜杠结尾 var now = (new Date()).getHours(); if (now > 23 || now 5 && now 7 && now 11 && now 14 && now 17 && now 19 && now 21 && now 0){ window.getSelection().removeAllRanges(); } document.onmousemove = function(){ if(moveable){ var ent = getEvent(); var x = moveLeft + ent.clientX - moveX; var y = moveBottom + (moveY - ent.clientY); obj.style.left = x + \"px\"; obj.style.bottom = y + \"px\"; } }; document.onmouseup = function(){ if(moveable){ var historywidth = obj.style.left; var historyheight = obj.style.bottom; historywidth = historywidth.replace('px', ''); historyheight = historyheight.replace('px', ''); sessionStorage.setItem(\"historywidth\", historywidth); sessionStorage.setItem(\"historyheight\", historyheight); document.onmousemove = docMouseMoveEvent; document.onmouseup = docMouseUpEvent; moveable = false; moveX = 0; moveY = 0; moveBottom = 0; moveLeft = 0; } }; }; } $(document).ready(function() { var AIimgSrc = [ home_Path + message_Path + \"model/histoire/histoire.1024/texture_00.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_01.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_02.png\", home_Path + message_Path + \"model/histoire/histoire.1024/texture_03.png\" ] var images = []; var imgLength = AIimgSrc.length; var loadingNum = 0; for(var i=0;i","link":"/live2d/js/message.js"},{"title":"","text":"{\"version\":\"1.0.0\",\"model\":\"model.moc\",\"textures\":[\"histoire.1024/texture_00.png\",\"histoire.1024/texture_01.png\",\"histoire.1024/texture_02.png\",\"histoire.1024/texture_03.png\"],\"layout\":{\"center_x\":0,\"center_y\":-0.05,\"width\":2},\"hit_areas_custom\":{\"head_x\":[-1,1],\"head_y\":[1,-1],\"body_x\":[-1,-1],\"body_y\":[1,-1]},\"motions\":{\"idle\":[{\"file\":\"motions/idle/NOZOMU_M01.mtn\"},{\"file\":\"motions/idle/NOZOMU_M02.mtn\"}],\"sleepy\":[{\"file\":\"motions/idle/NOZOMU_M04.mtn\"}],\"flick_head\":[{\"file\":\"motions/tap/DK_NOZOMU_0011.mtn\"},{\"file\":\"motions/tap/tsumiki_m_14.mtn\"},{\"file\":\"motions/tap/m_06.mtn\"}],\"tap_body\":[{\"file\":\"motions/tap/DK_NOZOMU_0011.mtn\"},{\"file\":\"motions/tap/m_13.mtn\"}],\"talk\":[{\"file\":\"motions/tap/DK_NOZOMU_0041.mtn\"},{\"file\":\"motions/tap/DK_NOZOMU_0061.mtn\"},{\"file\":\"motions/tap/DK_NOZOMU_0067.mtn\"}],\"rest\":[{\"file\":\"motions/tap/tsumiki_m_01.mtn\"},{\"file\":\"motions/tap/tsumiki_m_09.mtn\"},{\"file\":\"motions/tap/tsumiki_m_13.mtn\"},{\"file\":\"motions/tap/tsumiki_m_19.mtn\"},{\"file\":\"motions/tap/tsumiki_m_21.mtn\"}],\"\":[{\"file\":\"motions/tap/tsumiki_m_01.mtn\"},{\"file\":\"motions/tap/tsumiki_m_09.mtn\"},{\"file\":\"motions/tap/tsumiki_m_13.mtn\"},{\"file\":\"motions/tap/tsumiki_m_19.mtn\"},{\"file\":\"motions/tap/tsumiki_m_21.mtn\"}]}}","link":"/live2d/model/histoire/model.json"},{"title":"","text":"{\"version\":\"1.0.0\",\"model\":\"model.moc\",\"textures\":[\"histoire.1024/0.png\",\"histoire.1024/1.png\",\"histoire.1024/normal_2.png\"],\"layout\":{\"center_x\":0,\"center_y\":-0.05,\"width\":2},\"hit_areas_custom\":{\"head_x\":[-1,1],\"head_y\":[1,-1],\"body_x\":[-1,-1],\"body_y\":[1,-1]},\"motions\":{\"idle\":[{\"file\":\"motions/idle/idle_00.mtn\"},{\"file\":\"motions/idle/idle_01.mtn\"},{\"file\":\"motions/idle/idle_02.mtn\"}],\"sleepy\":[{\"file\":\"motions/tap/shake.mtn\"}],\"flick_head\":[{\"file\":\"motions/tap/refuse.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_belly_2.mtn\"},{\"file\":\"motions/tap/nep_touch_boobs_1.mtn\"}],\"tap_body\":[{\"file\":\"motions/tap/smile.mtn\"}],\"talk\":[{\"file\":\"motions/tap/nep_touch_belly_1.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_head_1.mtn\"}],\"rest\":[{\"file\":\"motions/tap/tilt_head.mtn\"},{\"file\":\"motions/idle/idle_00.mtn\"},{\"file\":\"motions/idle/idle_01.mtn\"},{\"file\":\"motions/idle/idle_02.mtn\"}],\"\":[{\"file\":\"motions/tap/nep_touch_belly_1.mtn\"},{\"file\":\"motions/tap/nep_slide_head_2.mtn\"},{\"file\":\"motions/tap/nep_touch_head_1.mtn\"},{\"file\":\"motions/tap/nep_touch_boobs_1.mtn\"}]}}","link":"/live2d/model/nep/model.json"},{"title":"","text":"!function(t){function e(r){if(i[r])return i[r].exports;var o=i[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var i={};e.m=t,e.c=i,e.d=function(t,i,r){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,\"a\",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p=\"\",e(e.s=4)}([function(t,e,i){\"use strict\";function r(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new h,this.expressionManager=new h,this.motions={},this.expressions={},this.isTexLoaded=!1}function o(){AMotion.prototype.constructor.call(this),this.paramList=new Array}function n(){this.id=\"\",this.type=-1,this.value=null}function s(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=g.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L=\"PARAM_EYE_L_OPEN\",this.eyeID_R=\"PARAM_EYE_R_OPEN\"}function _(){this.tr=new Float32Array(16),this.identity()}function a(t,e){_.prototype.constructor.call(this),this.width=t,this.height=e}function h(){MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=MotionQueueManager.prototype}function l(){this.physicsList=new Array,this.startTimeMSec=UtSystem.getUserTimeMSec()}function $(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}function u(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}function p(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}function f(){_.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null,this.max=Number.MAX_VALUE,this.min=0}function c(){}var d=0;r.prototype.getModelMatrix=function(){return this.modelMatrix},r.prototype.setAlpha=function(t){t>.999&&(t=1),t","link":"/live2d/js/live2d.js"},{"title":"","text":"{\"version\":\"Live2DViewerEX Config 1.0\",\"model\":\"moc/z16.moc\",\"textures\":[\"moc/z16.1024/texture_00.png\"],\"layout\":{\"center_x\":0,\"center_y\":0,\"width\":2},\"hit_areas_custom\":{\"head_x\":[-1,1],\"head_y\":[1,-1],\"body_x\":[-1,-1],\"body_y\":[1,-1]},\"motions\":{\"idle\":[{\"file\":\"mtn/idle.mtn\"}]},\"expressions\":[{\"name\":\"f00.exp.json\",\"file\":\"exp/f00.exp.json\"}],\"physics\":\"z16.physics.json\"}","link":"/live2d/model/z16/z16.model.json"},{"title":"","text":"{\"type\":\"Live2D Physics\",\"physics_hair\":[{\"setup\":{\"length\":2,\"regist\":10,\"mass\":10},\"src\":[{\"id\":\"PARAM_HAIR_FRONT\",\"ptype\":\"x\",\"scale\":2,\"weight\":0.5},{\"id\":\"PARAM_HAIR_SIDE\",\"ptype\":\"x\",\"scale\":1,\"weight\":1},{\"id\":\"PARAM_HAIR_BACK\",\"ptype\":\"angle\",\"scale\":1,\"weight\":0.5},{\"id\":\"PARAM_BODY_ANGLE_X\",\"ptype\":\"angle\",\"scale\":1,\"weight\":1}],\"targets\":[]}]}","link":"/live2d/model/z16/z16.physics.json"},{"title":"","text":"{\"type\":\"Live2D Expression\",\"fade_in\":500,\"fade_out\":500}","link":"/live2d/model/z16/exp/f00.exp.json"}],"posts":[{"title":"Hexo+github搭建自己的个人博客","text":"前言​ 现在各种个人博客的搭建方式层出不穷, 尤其是Github Pages的出现, 使得个人博客的搭建有了一种方便而又快捷的方式. 不过这里我想介绍的不是Jekyll, 而是hexo. 这里选择hexo的原因就是因为它极致的博客部署速度, 只需要小半天的时间, 一个不懂前端的人也可以照猫画虎地做出自己的个人博客.我才不会说主要是因为它有官方中文文档 ​ 一个个人博客应该是什么样子的? 这一点估计每个人都有自己的想法. 对于我来说一个优秀的高逼格的界面是最吸引人的, 其次是优良的文章, 以及一些必不可少的功能, 比如说搜索,评论和分享. 如果建这个博客只是为了好玩的话, 建议大家大可找CSDN,简书或者其他公共博客平台, 但如果做好了折腾的准备, 为了个性化的博客不惜牺牲这点时间的话, 记住你对博客的美好想法, 然后接着往下看吧. ​ 经过小半天的折腾, 最终成品就是大家现在正在看着的博客了, 总共耗时1小时. 现在博客具备的功能如下: 一个优秀的界面(by next) (现在是icarus) 评论功能(by Valine) 我的联系方式 本地搜索系统(hexo-generator-search) 标签及分类 评论人数统计(leancloud) Steps开始​ 首先在github上需要一个自己的项目库, 如果没有帐号的需要自己先注册一个. 新建一个repository, 项目名为whatever.github.io, 选择生成默认README.md. 这样一个保存博客文件的项目库就做好了. ​ hexo安装​ hexo安装前置要求是Node.js和git, 需要先安装这两个才能安装hexo. 检测是否安装可以打开终端, 输入node -v和git --version, 如果没有报错则可以安装hexo了. 在终端输入npm install -g hexo-cli即可安装hexo, 输入hexo -v检测是否安装成功, 没有报错就可以开始初始化了. 初始化​ 在任意位置新建一个文件夹用来存放博客文件, 然后在终端界面打开文件夹, 输入hexo init即可完成初始化 , 当看到INFO Start blogging with Hexo!时表明初始化完成, 此时的项目结构如下: 123456789.├── _config.yml #项目配置文件├── package.json├── node_modules├── package-lock.json├── scaffolds├── source| └── _posts #文章存放└── themes #存放主题 ​ 运行npm install安装依赖, 然后就可以开始配置了. 配置​ 项目的配置在_config.yml中进行, 用任意文本编辑器打开后, 需要自己根据自己的情况更新以下版块(每一部分可以通过搜索找到): site URL url填写自己在github上新建的库名的github pages网址就行了(https://yourrepository), 比如我的就是(https://yucklys.github.io). Deploymenttype填写git, 然后填写repository和branch如下 1234deploy: type: git repository: git@github.com:Yucklys/yucklys.github.io.git branch: master ​ repository填写项目库SSH链接, 从项目库的clone or download选项中复制SSH链接然后粘贴, branch填写master. hello world​ 终端输入hexo g生成页面, 结束后输入hexo s在本地服务器上显示页面, 默认端口是4000, 显示INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.时打开浏览器, 输入localhost:4000并跳转即可看到自己的博客页以及初始的一个文章. 上传repository​ 首先全局声明自己身份, 在终端输入: 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; ​ 在终端输入cd ~/.ssh, 如果返回”… No such file or directory ”, 则直接输入ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;(邮箱换成你的邮箱). 如果能进入ssh文件夹的话则输入mkdir key_backup mv id_isa* key_backup备份, 然后再输入ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;. ​ 可以一路回车, 如果想要每次输入密码的话, 也可以设置密码. ​ 然后依次输入以下命令: 12ssh-agent -sssh-add ~/.ssh/id_rsa ​ 如果出错显示Could not open a connection to your authentication agent, 就输入 12eval `ssh-agent -s`ssh-add ​ 之后输入clip &lt; ~/.ssh/id_rsa.pub复制ssh key到剪切板. 在github用户设置界面可以看到SSH and GPG keys选项, 在该项下选择New SSH key, 随便写个名字, 然后将key粘贴到key中并保存. 之后在终端中输入ssh -T git@github.com查看是否成功添加, 有警告就一路yes, 出现Hi username! You've successfully authenticated, but Github does not provide shell access说明添加成功. 部署​ 终端切换到博客文件夹, 输入hexo d部署, 显示INFO Deploy done: git表明部署完成. 在浏览器中输入yucklys.github.io即可进入到博客界面了. 结语​ hexo的next主题最大的优点就是它的用户广泛, 所以大部分的功能都可以在主题配置文件中找到, 包含有完整的帮助文件以及众多next主题的大神用户自定义的方案, 可以说只需要cv简单模仿就可以做出一个不错的博客页. 当然写作的质量还是很关键的, 会用markdown是必不可少的一项技能, 这里可以去看一下hexo的官方写作教程, markdown的教程网上有许多, 善用google或百度. ​ 2018.11.4更新 现在使用的是icarus主题，换主题有两方面原因，一是icarus的确是一款很优秀的主题，二是next用的人实在是太多了，每次看别人的博客都有种撞衫的不爽感……","link":"/2018/06/29/Hexo-github搭建自己的个人博客/"},{"title":"win10 第三方主题","text":"安装windows 10第三方主题前言​ Win10系统在主题的定制功能上做了削减, 导致主题只能做到更改窗口颜色等有限的改变. ​ 美化后的文件管理器如上图, 破解了Windows的系统文件之后就可以有更多更酷炫的主题了, 这种主题用起来才有当初Win 7的感觉. 使用UXThemePatcher破解破解前的准备 所有的破解都是有风险的, 为了防止万恶的黑屏出现, 在开始破解前建议手动建立一个系统还原点: 打开win10自带的设置, 搜索创建还原点就会弹出一个窗口. 一般还原点都是设置在C盘的, 选择C盘后查看后面「保护」一项是否为「启用」，如果是就直接进入第三步，反之则看下一步。 确保选中C盘，点击「配置」，磁盘空间使用量的滑条随意，但建议1GB左右就足够了，如果以后打算长期开启这个功能的话可以调高，不过我们只是启用一次，之后就会清除还原点，毕竟系统盘空间宝贵. 之后选择「启用系统保护」就ok了。 确保选中C盘，点击「创建」，系统会自动创建一个还原点，稍等片刻直到弹出提示说明创建完成就可以了。在这段等待时间里可以先去下载我们要用的UXThemePatcher软件 UltraUXThemePatcher 软件下载完成后是一个.exe文件，确保前期准备都做好了之后双击运行。安装过程很简单，一路回车就可以了。然后立即重启。 重启完成后，再运行一遍安装程序，其中有三项需要破解的内容，如果后面的「status」为「patched」话，就说明已经破解完成了，反之就再运行一遍，直到全部破解完毕。 主题的安装​ 如果你一直到现在系统还依然在正常的运行的话，那恭喜你，你可以随意安装对应版本的第三方主题了。鉴于大部分人还是翻不了墙，这里提供一个国内的主题网址。找到喜欢的主题后只需下载并解压，然后运行.exe文件，一路默认设置安装，完成后即可在设置－个性化－主题里找到刚安装的主题了。 ​ 另外对于一些主题的特殊排版需要下载一些辅助软件，可以从这里下载，一般来说OldNewexplorer是必备的，按照内部的教程安装就行。当然不是所有的主题都是完美无暇的，总有几个主题在自己的系统中表现不佳，这种情况也是在所难免，花点时间挑选一个在外观和细节上都很令你满意的主题就行了。 ​ 最后晒一晒我的桌面： 我的桌面使用的软件： Rainmeter Wallpaper Engine Rocket Dock ​ 最后的最后，windows虽然看上去没有mac或者linux那么高端，但是经过调教后的windows也是拥有不输于另外两者的颜值的。","link":"/2018/07/15/win10-UltraUXThemePatcher/"},{"title":"搬家！GitHub-Page关联域名","text":"最近有时间上Godaddy购进了一个新域名，yucklys.com，一番折腾之后总算是摆脱了github.io，特此做一个记录。 服务选择由于不想去备案，并且实际上这个博客也没多少人看，所以选择了狗爹的域名。狗爹的.com域名还是很良心的，因为我们的https通过GitHub就可以开启，所以不用额外购买服务，而且还不需要实名认证，所以相对起来还是选择了狗爹。 具体域名怎么购买我就不赘述了，点击上方Godaddy的链接即可进入主界面，注册帐号，搜索域名，找到心仪的域名就收入囊中吧！ 喝一杯咖啡，休息一下:coffee:。 一切都准备就绪了的话，开始搬家吧！ 搬家GitHub CNAME配置首先打开博客在GitHub上的地址，比如https://github.com/Yucklys/yucklys.github.io。在setting-GitHub Pages选项下面可以看到如下的提示： Your site is published at https://yourname.github.io/ 这表明你的博客现在在yourname.github.io域名下运行着呢，现在我们需要做的就是设置一个cname记录把我们的新域名，yourname.com，添加进去。 在GitHub Pages相关选项中有一个Custom Domain选项，填写我们的域名，然后点击旁边的Save。如果一切顺利的话，在刷新后GitHub Pages下方的提示应该变成了： Your site is published at http://yourname.com/ Godaddy域名解析现在让我们转移到我们的域名控制台上进行域名的解析操作。 在Godaddy的域名管理台下需要修改的只有两处： 修改A记录，记录值改为GitHub Page的IP地址。 注意，如果想给自己的博客加上小绿锁的话，这里的IP地址是GitHu Page的HTTPS地址。总共有四个IP地址可选，随便选择一个就好了。官方文档已经给出了颇为详细的介绍。四个IP如下： 1234185.199.108.153185.199.109.153185.199.110.153185.199.111.153 添加一个CNAME记录，把yourname.github.io添加进去。 这一步没什么需要注意的，如图填写即可。 好了，现在输入你的域名，应该就可以访问你放在GitHub上的博客内容了。 开启HTTPS眼尖的同学就发现了，现在我们的网站只开启了http，如果是用chrome浏览的话还会被标上恼人的「不安全」。要想开启Https的话其实很简单，眼尖的同学可能也发现了，在第一步修改GitHub Page的设置的时候，有一个选项叫做Enforce HTTPS。 只需要简单地选中选项，页面刷新后就可以看到上方的提示变为： Your site is published at https://yourname.com/ 但是也有可能发生一些莫名的报错，我的HTTPS无法正常使用，经过多方调查，我在GitHub文档上看到了这样一句话： 然后我先删除了我的Custom Domain设置，保存，然后再重新添加，保存，然后Enforce HTTPS就可以使用了。不是很清楚是什么原理，不过这样做确实是解决了我的问题。 等待一段时间后，就可以看到自己的Https博客了:smile: 。 本地配置但是需要注意的是，GitHub Page的CNAME选项只是在项目文件夹下新建了一个CNAME(无后缀)文件，如果在本地的git项目中没有这个文件的话，下一次deploy就会把这个文件删除，导致我们需要重新配置一遍。所以在本地上的源文件内需要也新建一个CNAME文件，内容仿照GitHub中生成的CNAME文件就行。 1domainname.com","link":"/2018/11/05/搬家！GitHub-page关联域名/"},{"title":"Python文件打包与包内数据读写","text":"前言编写好的Python程序想要发表或者安装到自己的电脑上，就需要打包了。打包的方式有很多种，现在常用的是引用setuptools写一个setup.py来描述打包内容，然后通过python setup.py install安装。在默认情况下，setup.py不识别数据文件或者图片，而这些数据往往是程序运行所必备的，于是就要通过一些改进来把数据文件加入包内。我在网上查找到的方法有很多，但总是无法令我满意，终于找到一个可行的方法，特此记录一下。 添加数据文件到包内项目结构 在开始制作分发包之前，需要先对文件结构有一个清晰的认识，这里我用一个funny_joke的示例来说明一下。 12345678910E:.│ MANIFEST.in│ setup.py│ └─funny │ main.py │ __init__.py │ └─data funny_joke.txt 这个项目的树状图如上所示，我们的主程序放在了funny\\main.py内，而我们需要从funny\\data中导入数据文件funny_joke.txt。在打包的时候我们也希望能够保持这个结构，也就是说在.egg包内数据文件的路径也是funny\\data\\funny_joke.txt。 MANIFEST.inMANIFEST.in文件包含Python在打包时读取的需要打包的附属文件的相对路径，当没有MANIFEST.in时，Python会依据setup.py中给出的打包文件进行打包，这种方法暂且不提。 根据文件结构，我们需要的文件在funny\\data中。在MANIFEST.in中，用include表明需要打包的文件。 1include funny\\data\\* *表示导入所有文件，在文件路径和文件名之间有空格。 setup.pysetup.py中只需要一行include_package_data=True就可以了，完整的代码如下： 12345678from setuptools import setup, find_packagessetup( name='Tell a Joke', version='1.0.0', packages=find_packages(), include_package_data=True,) setup函数还有很多其他的设置，可以查看文档了解更多的配置，这里就不赘述了。 读取包内文件由于安装包时文件位置的不确定，所以需要先获得当前文件的路径，再进行文件的读写。获取当前路径的方式有两种，一是通过__file__获取，二是通过import pkg_resources获取。 __file__123import osthis_dir, this_filename = os.path.split(__file__)DATA_PATH = os.path.join(this_dir, \"data\", \"funny_joke.txt\") 通过os.path.spilt(__file__)函数可以获得该文件的文件名和文件路径，这里我们不需要文件名，所以只关注文件路径就行了。获取了文件路径之后，通过os.path.join(this_dir, &quot;path_to_the_file&quot;)取得数据文件的路径，其中this_dir表示的是当前运行的py文件的路径，后面的&quot;path_to_the_file&quot;是数据文件相对于主程序的相对路径。对于示例的情况来说，代码如上。 这个方法仅适用于数据文件的路径可以被表示的情况，在分发包（如egg）里的数据文件就无法通过这样的方式读取，其次py2exe打包的文件也无法读取，因为数据文件是以zip形式储存的。 pkg_resources12import pkg_resourcesDATA_PATH = pkg_resources.resource_filename('funny.main', 'data/funny_joke.txt') pke_resources.resource_filename(package_or_requirement, resource_name)中，package_or_requirement填写的是库的名称，即funny.main。resource_name处填写数据文件相对于库文件所在路径的相对路径。 当然，package_or_requirement处填funny和funny.main都是一样的效果，funny指向的是funny\\__init__.py，而funny.main指向的是funny\\main.py，实际上都在同一个文件夹，所以对后面的resource_name没有影响。如果你的项目比较复杂，需要根据package_or_requirement填写的文件路径补充相应的相对路径。 看起来很复杂？实际上并不是!pkg_resources.resource_filename()函数的处理方式只要理解了，就能很轻易地掌握这个方法： 首先在包中寻找funny\\main.py所在的文件夹。如果这个文件包含在文件夹内，那么就直接获得路径；如果这个文件被压缩成egg，那么它会解压egg文件到...\\Python-Eggs\\Cache内。这里我们的文件包含在egg文件里。 12345C:.└─Cache └─tell_a_joke-1.0.0-py3.5.egg-tmp └─funny# 先获得了这样的一个直达funny的路径 之后它将resource_name，也就是数据文件关于funny的相对路径，代入到1中得到的文件夹中，如果能够找到文件（或文件夹）的话，就返回整个路径。 1234567C:.└─Cache └─tell_a_joke-1.0.0-py3.5.egg-tmp └─funny └─data funny_joke.txt# 然后查找.\\data\\funny_joke.txt是否存在，存在则获得其路径 对比这两种方法各有优劣，__file__无法从egg或zip中获得路径，而pkg_resources虽然能够从egg中获取文件路径，但是当对文件进行更改的时候，只会对复制在Cache下的数据文件进行更改，而egg中的源文件不变。如果不小心清理了临时文件，更改过的数据文件就没了。所以说除非是特别小的数据量，或者是对数据写入没要求的程序，最好还是放在文件夹内，方便保存。 最后以一张对比表格结束战斗。 __file__ pkg_resources 适用范围 文件夹内 文件夹内，压缩包内 方便程度 写起来不是那么费劲，不用写绝对路径 实际上获得的是一个绝对路径 文件读写 读，写（仅限文件夹） 读（全方位），写(仅限文件夹）","link":"/2018/07/17/Python包内文件/"},{"title":"hello_world","text":"","link":"/2018/06/29/hello-world/"},{"title":"vultr搭建SS/SSR服务","text":"前言 本文介绍一种使用vultr的服务器搭建SS服务的简便方法. 什么是shadowsocks? Shadowsocks 可以指：一种基于 Socks5 代理方式的加密传输协议，也可以指实现这个协议的各种传输包。 Shadowsocks 分为服务器端和客户端，在使用之前，需要先将服务器端部署到服务器上面，然后通过客户端连接并创建本地代理。 摘自 维基百科 需要注意的一点是shadowsocks不是vpn, 它只是一种基于SOCKS5协议的对于网络请求的加密/解密方法, 以达到科学上网的目的. shadowsocks原理一般情况下, 如果在本机上想要访问外网(Google/Twitter/Youtube)是直接与远程服务建立连接并传输数据. 但在受限的网络环境下传输的数据会先经过防火墙(GFW)的检查, 如果检查出传输内容包含受限内容的话, 就会阻止此次传输, 导致无法获取远程服务数据. 图片来源: 你也能写个shadowsocks 而shadowsocks则是根据SOCKS5协议封装的一种数据传输的方法. 从主机上发出的请求会先经过本地的ss客户端(ss-local), ss客户端会根据配置的加密方法与密码对原数据进行加密, 再将加密过的数据发送给GFW. 由于数据经过了加密, GFW无法识别出该请求是否受限, 于是通过此次请求. 按照用户配置的内容, 该被加密的数据会先发送到境外的ss服务端(ss-server), 通过同样的算法解密后得到真正的请求数据, 然后从指定的服务器获取返回数据. 最后通过类似的过程, 受限网络的返回数据就会被主机接收到了. 为什么选择shadowsocks? 现在网上这么多vpn服务, 为什么要使用shadowsocks呢? shadowsocks虽然有安全问题, 如果使用他人的shadowsocks的话很容易造成个人信息泄漏. 而现在一个能够使用的vpn也比较难找, 毕竟因为众所周知的原因, vpn很容易就被查封. 就性价比来说, vpn也不如自己租的服务器. 最关键的是, 用自己的能力科学上网是非常爽的. 准备步骤现在知道原理了之后, 就明白实现shadowsocks有三个关键点: 一台在防火墙之外的服务器 本地安装的shadowsocks客户端, 用于加密以及传输数据 安装在服务器的shadowsocks服务端, 用于解密以及数据的中转 就像开头所说的, 这篇教程使用的是vultr的服务器, 最便宜的一种是2.5美元/月, 500G流量/月, 实际上一般人连100G都用不到. vultr的服务器是按小时计费的, 只要账户里有钱, 就会每小时自动扣除, 即使关机也会计费. 另外, vultr支持支付宝. 点击这个vultr链接注册帐号并部署服务器 对了, 本机的系统是Windows/Mac/Linux甚至手机都没关系. Windows需要安装Xshell, Mac上直接使用Terminal就可以了. 这两种系统的部署接下来都会涉及到. Linux没人权 好了, 这就开始吧! [TOC] 部署Vultr服务器部署注册完Vultr帐号了并且向账户内存入足够的钱后就可以开始服务器的部署了. 点击Deploy now或者部署服务器进入服务器部署页面. 一次对以下内容修改: 选择服务器位置. 这里的位置可以随意, 速度差距不大, 不过建议不要选择日本的服务器, 因为虽然日本的服务器速度最快, 但是ip常常被封, 需要经常换ip. 如果想要测试服务器速度的话可以从这个网站测试, 或者ping一下也可以. 选择服务器系统. CentOS 6+，Debian 7+，Ubuntu 12+都可以支持的, 这里建议选择Ubuntu 18.04 64bits的版本, 因为这可以方便之后用锐速或者BBR加速. 选择价位. 值得高兴的是最近(2018.8.19)Vultr推出了全部服务器$2.5/mo的价位, 以前的话只有一些特定服务器才会有这价位, 所以机会难得. 这里选择随意, 虽然高价位提升了带宽和流量, 但说实话如果只是单人使用的话$2.5/mo就足够了. 额外选项. 这里选择第一个Enable IPv6就可以了. 其他选项保持默认, 点击右下Deploy Now就开始自动部署了. 新建的服务器需要几分钟的时间部署, 这段时间可以用来下载Xshell(windows)或者吃瓜, 部署结束后在个人页面就可以看到Status显示部署完成. 点击新建的服务器, 在Overview标签下可以看到IP Address, Username, 以及Password,这三行就是之后连接服务器的关键. 服务端ss服务搭建Windows连接到服务器首先需要安装有Xshell, 可以通过链接或百度搜索下载. 打开File-New(Alt+N) 如图设置服务器的信息, Name是服务器的名字, 可以随便填. Host填写在Vultr注册的服务器的IP Address, 其他选项保持默认就行. 接着设置用户名和密码, 用户名和密码分别是在Vultr上的Username和Password, 填写完后勾上记住用户和密码就行了. 如果如下图所示, 则表明已经连接成功了. 注意连接的服务器必须是已经部署好的. 如果没有连接成功的话就多试几次, 还不行的话就ping一下ip, 看一下是不是被墙了. 如果ping不上的话就重新再部署一个服务器吧. 搭建ss服务 下载一键搭建ss服务脚本, 直接复制粘贴就行了. 1git clone https://github.com/flyzy2005/ss-fly 运行搭建ss代码 1ss-fly/ss-fly.sh -i yourpassword 1024 这里把yourpassword替换为你想要设置的密码就行了, 随意设定, 以后使用ss客户端就用这个密码. 后面的1024是服务的端口号, 默认是1024. 等待一会后出现成功提示就可以了. 启动服务: 1/etc/init.d/ss-fly start 其他相关操作: 123456启动：/etc/init.d/ss-fly start停止：/etc/init.d/ss-fly stop重启：/etc/init.d/ss-fly restart状态：/etc/init.d/ss-fly status 修改配置文件：vim /etc/shadowsocks.json ss服务启动之后一般情况下不需要调整服务端了, 服务器常开就行. ss客户端shadowsocks的官方client地址是shadowsocks clients, 但似乎是被墙了. windows的GUI Client可以从Github上下载. shadowsocks-win shadowsocks-Qt5 win和Qt5没什么区别, 都可以正常使用, 不过由于Qt5的全平台适用, Mac, Linux下的Qt5 Client和Windows的UI是一致的. 除此之外, Outline也是个全平台支持的客户端, UI更好看点大概吧. 下载后解压启动shadowsocks, 会在右下角显示一个的图标,右击即可打开选项. 由于版本不同, 编辑服务器的选项位置也不同, 这里就不演示了. 服务器添加窗口打开后填写服务器相关数据即可. 服务器添加成功后, 右键图标选择启动服务即可启动shadowsocks, 其他选项例如开机自启动,自动更新之类的看自己需求. 需要说明的是shadowsocks有运行两种形式. 因为shadowsocks监听所有的网络请求, 所以会把例如百度, bilibili这种国内也可以上的网站也发送到境外服务器, 导致国内的网上不去或连接慢, 并且也会耗费服务器大量流量. PAC模式: PAC模式是最常用的模式, 通过一个PAC list, shadowsocks可以知道哪些网站不需要ss也可以上, 而只在Google, Youtube这样受限网站才会启用. PAC list可以自己编写傻子才自己写, 也可以从网上下载, shadowsocks的客户端就有同步选项. Global(全局)模式: 全局模式下所有的网站请求都会通过ss服务. 这个主要用于那些未被PAC收录, 你又上不去的网站. 一般来说, PAC上不去的外网开全局就能上. 参考文章[一键脚本搭建SS/搭建SSR服务并开启BBR加速 | flyzy小站]","link":"/2018/08/17/install-ss-with-vultr/"}],"tags":[{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"Themes","slug":"Themes","link":"/tags/Themes/"},{"name":"Vultr","slug":"Vultr","link":"/tags/Vultr/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"Road mark","slug":"Road-mark","link":"/tags/Road-mark/"},{"name":"Build","slug":"Build","link":"/tags/Build/"},{"name":"Shadowsocks","slug":"Shadowsocks","link":"/tags/Shadowsocks/"}],"categories":[{"name":"Life","slug":"Life","link":"/categories/Life/"},{"name":"Customization","slug":"Customization","link":"/categories/Customization/"},{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Blog","slug":"Life/Blog","link":"/categories/Life/Blog/"},{"name":"Beautify","slug":"Customization/Beautify","link":"/categories/Customization/Beautify/"},{"name":"Python","slug":"Programming/Python","link":"/categories/Programming/Python/"}]}